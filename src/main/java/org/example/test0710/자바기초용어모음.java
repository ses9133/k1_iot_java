package org.example.test0710;

public class 자바기초용어모음 {
}

/*
1.
접근제한자
: 클래스, 변수, 메서드에 적용할수있으며 접근 범위를 설정함.

- public: 모든 클래스, 패키지에 접근 가능
- protected: 같은 패키지내에 접근 가능. 다른 패키지라면 상속받은 클래스에서만 접근 가능
- default: 같은 패키지 내에 접근 가능, 접근제한자 명시 없으면 default 키워드 생략되어있으나 명시해서 작성하면 안됨.
- private: 같은 클래스내에 접근 가능

2. static
- 데이터를 공유할 수 있게 하는 키워드
- 객체화 없이 클래스명으로 바로 접근할 수 있음
- static 변수: [선언방법] 클래스명.변수명;
- static 메서드: [선언방법] 클래스명.메서드명();

3. final
- final 변수: = 상수(변하지 않는 값), UPPER_SNAKE 작성법
- final 메서드: 오버라이딩 안됨
- final 클래스: 상속할 수 없음.

4. super vs this
- this : 객체 자신의 필드, 생성자 참조
- super : 부모의 필드, 생성자를 참조

5. 오버로딩 vs 오버라이딩
- 오버로딩:  메서드명은 동일하되, 매개변수 타입/개수/순서를 달리하여 구현하는 것. (반환타입 달리하는 것은 영향을 미치지 않는다)

- 오버라이딩: 부모 클래스의 메서드를 상속받아 해당 메서드를 재정의하는 것, (상속 전제)
            메서드의 시그니처(반환타입, 메서드명, 매개변수 타입/개수) 동일해야함.(반환타입은 같거나 자동형변환 가능해도 됨) 구현부를 재정의함
            @Override

6. abstract
- abstract 클래스
: 추상메서드 1개 이상 반드시 포함해야한다. (추상메서드 1개 이상 있으면 일반 메서드도 선언 가능)
: 그 자체로 인스턴스화를 할 수 없다. 상속받아 상속받은 클래스 통해 객체화 가능

- abstract 메서드
: 구현부가 없는 메서드. 반환타입 메서드명(); (중괄호 없이 세미콜론으로 끝남)
: 상속받은 클래스에서 해당 추상 메서드를 반드시 오버라이딩 해야함.

7. interface vs abstract class
- interface
: 공통된 동작을 약속하는 추상타입
: 메서드: 모든 메서드가 public abstract 이며 그외에 default 메서드, static 메서드만 선언 가능함
                                  (default 메서드는 오버라이딩 선택적, static 은 오버라이딩 불가능함)
: 변수: 모든 변수가 public abstract final 임
: 인터페이스 자체로 객체화 X -> 인터페이스를 구현하여 객체화

- abstract class
: 하위 클래스들을 공통된 부분을 추상화하여 만든 일부 구현이 누락된 미완성 클래스
: 메서드: 추상메서드 1개 이상있으면 일반 메서드 선언 가능
: 변수: 타입 상관 없음
: 추상 클래스 자체로 객체화 X -> 상속받아서 객체화

8. extends vs implements
- extends
: 상속시 사용하는 키워드
: 클래스와 클래스간 상속(다중 상속X), 인터페이스와 인터페이스간 상속(다중 상속 가능)

- implements
: 인터페이스 구현시 사용하는 키워드
: 클래스와 인터페이스간 구현
: 다중 구현 가능

9. try-catch-finally
- try
: try {
  // 예외 발생할 수 있는 구문 작성
}
- catch
catch(예외발생타입 예외저장변수) {
   // 예외처리하여 실행할 구문 작성
}
- NullPointerException
- ArithmeticException
- ArrayIndexOufOfBound 등,,
- Exception 은 자바 예외 클래스중 최상위 클래스

- finally
finally {
    // 예외처리 상관없이 무조건 실행되는 코드 작성
}

try {
  // 예외 발생할 수 있는 구문 작성
} catch (ExceptionType e) {
   // 예외처리하여 실행할 구문 작성
} finally {
  // 예외처리 상관없이 무조건 실행되는 코드 작성
}


 */
